pipeline {
  agent any

  environment {
    REPO_NAME = 'myapp'
    DOCKER_CREDENTIAL_ID = 'docker-hub-cred'
    IMAGE_TAG = "${env.BUILD_NUMBER}"
    REGISTRY = 'docker.io/myusername'
    KUBE_CONFIG = credentials('kubeconfig-cred') // For K8s access
  }

  options {
    skipDefaultCheckout()
    timestamps()
    buildDiscarder(logRotator(daysToKeepStr: '10', numToKeepStr: '20'))
  }

  stages {
    stage('Checkout Code') {
      steps {
        git url: 'https://github.com/myorg/myapp.git', branch: 'main'
      }
    }

    stage('Code Quality - SonarQube') {
      steps {
        withSonarQubeEnv('SonarQubeServer') {
          sh 'mvn clean verify sonar:sonar'
        }
      }
    }

    stage('Build App (Maven)') {
      steps {
        sh 'mvn clean package -DskipTests'
      }
    }

    stage('Build Docker Image') {
      steps {
        sh "docker build -t ${REGISTRY}/${REPO_NAME}:${IMAGE_TAG} ."
      }
    }

    stage('Push to DockerHub') {
      steps {
        withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIAL_ID}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
          sh """
            echo $PASSWORD | docker login -u $USERNAME --password-stdin
            docker push ${REGISTRY}/${REPO_NAME}:${IMAGE_TAG}
          """
        }
      }
    }

    stage('Deploy to Kubernetes') {
      steps {
        withCredentials([file(credentialsId: 'kubeconfig-cred', variable: 'KUBECONFIG')]) {
          sh """
            helm upgrade --install ${REPO_NAME} ./helm-chart \
              --set image.repository=${REGISTRY}/${REPO_NAME} \
              --set image.tag=${IMAGE_TAG} \
              --kubeconfig $KUBECONFIG
          """
        }
      }
    }

    stage('Notify Monitoring or Slack') {
      steps {
        echo "Deployment complete. Monitoring with Prometheus/Grafana."
      }
    }
  }

  post {
    success {
      echo '✅ CI/CD Pipeline executed successfully!'
    }
    failure {
      echo '❌ Pipeline failed. Please check logs.'
    }
  }
}
